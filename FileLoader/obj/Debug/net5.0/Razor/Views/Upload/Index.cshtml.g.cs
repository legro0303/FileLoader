#pragma checksum "D:\Работа\Smartway\FileLoader\FileLoader\Views\Upload\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a971bef8ff1b607cd3fec3ee2ff13e085baf35bc"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Upload_Index), @"mvc.1.0.view", @"/Views/Upload/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Работа\Smartway\FileLoader\FileLoader\Views\_ViewImports.cshtml"
using FileLoader;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Работа\Smartway\FileLoader\FileLoader\Views\_ViewImports.cshtml"
using WebApplication1.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a971bef8ff1b607cd3fec3ee2ff13e085baf35bc", @"/Views/Upload/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"36ad1e58647da5ca915e63fa2be23205a49b2118", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Upload_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\Работа\Smartway\FileLoader\FileLoader\Views\Upload\Index.cshtml"
  
    ViewData["Title"] = "Upload the files";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<link href=""https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css""    
    rel=""stylesheet"">  
<link href=""../../Content/bootstrap.css"" rel=""stylesheet"" type=""text/css"" />  
<link href=""../../Content/bootstrap-theme.css"" rel=""stylesheet"" type=""text/css"" />    
<style>    
    .ui-widget-header {    
        background: #cedc98;    
        border: 1px solid #DDDDDD;    
        color: #333333;    
        font-weight: bold;    
    }    
    .progress-label {    
        position: absolute;    
        left: 50%;    
        top: 13px;    
        font-weight: bold;    
        text-shadow: 1px 1px 0 #fff;    
    }    
    .red {    
        color: red;    
    }    
</style>    
<div class=""container"">    
    <h1> File Upload </h1>    
    <div id=""FileBrowse"">    
        <div class=""row"">    
            <div class=""col-sm-4"">    
                <input type=""file"" name=""files"" id=""Files""  multiple />    
            </div>    
            <div class=""col-sm-2"">");
            WriteLiteral(@"    
                <input type=""button"" id=""UploadBtn"" class=""btn btn-danger"" value=""Upload"" />    
            </div>    
        </div>    
    </div>    

    <div class=""row"">    
        <div class=""col-sm-4"">    
            <div id=""progressbar-5"">    
                <div class=""progress-label"">    
                </div>    
            </div>    
        </div>    
    </div>      
    <div class=""row"">    
        <div class=""col-sm-6"">    
            <table class=""table"" id=""ListofFiles"">    
                <tr>    
                    <th>    
                        Files    
                    </th>     
                    <th>
                        Success
                    </th>
                </tr>    
            </table>    
        </div>    
    </div>       
</div>   
");
            DefineSection("scripts", async() => {
                WriteLiteral(@"  
<script src=""https://code.jquery.com/jquery-1.10.2.js""></script>      
<script src=""https://code.jquery.com/ui/1.10.4/jquery-ui.js""></script>    
<script>    
            
    $('#UploadBtn').click(async function () {    
        const files = $(""#Files"").get(0).files;    
        const fileData = new FormData(); 
        [...files].forEach((f) => fileData.append(""files"", f))  
        $.ajax({    
            url: ""/Upload/UploadFiles"",   
            type: ""POST"",    
            contentType: false,      
            processData: false,
            data: fileData,     
            success: (result) => {
                console.log(result);
                if (result != """") {    
                    $('#FileBrowse').find(""*"").prop(""disabled"", true);    
                    loadProgressBar([...result]);  
                }    
            },    
            error:  (err) => {    
                alert(err.statusText);    
            }    
        });    
    
    });    

    ");
                WriteLiteral(@" const loadProgressBar = (result) => {    
        const progressbar = $(""#progressbar-5"");    
        const progressLabel = $("".progress-label"");    
        progressbar.show();    
        $(""#progressbar-5"").progressbar({     
            change: () => {    
                progressLabel.text(    
                    progressbar.progressbar(""value"") + ""%"");     
            },    
            complete: () => {     
                progressbar.progressbar(""value"", 0); 
                progressLabel.text("""");   
                progressbar.hide();
                const markup = `${result.map(({fileName, isLoaded}) => `<tr><td>${fileName}</td><td>${isLoaded ? 'Успех' : 'Файл не загружен'}</td></tr>`)}` 
                $(""#ListofFiles tbody"").append(markup);    
                $('#Files').val('');    
                $('#FileBrowse').find(""*"").prop(""disabled"", false);    
            }    
        });    
        const progress = () => {    
            const val = progressbar.progressba");
                WriteLiteral(@"r(""value"") || 0;    
            progressbar.progressbar(""value"", val + 1);    
            if (val < 99) {    
                setTimeout(progress, 25);    
            }    
        }    
        setTimeout(progress, 100);    
    }    
</script>    
");
            }
            );
            WriteLiteral("\r\n\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
